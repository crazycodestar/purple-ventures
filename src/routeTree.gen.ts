/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ShippingIndexImport } from './routes/shipping/index'
import { Route as OrderIndexImport } from './routes/order/index'
import { Route as CartIndexImport } from './routes/cart/index'
import { Route as CollectionIndexImport } from './routes/$collection/index'
import { Route as PrdSlugIndexImport } from './routes/prd/$slug/index'
import { Route as BrowseCategoryIndexImport } from './routes/browse/$category/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ShippingIndexRoute = ShippingIndexImport.update({
  id: '/shipping/',
  path: '/shipping/',
  getParentRoute: () => rootRoute,
} as any)

const OrderIndexRoute = OrderIndexImport.update({
  id: '/order/',
  path: '/order/',
  getParentRoute: () => rootRoute,
} as any)

const CartIndexRoute = CartIndexImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => rootRoute,
} as any)

const CollectionIndexRoute = CollectionIndexImport.update({
  id: '/$collection/',
  path: '/$collection/',
  getParentRoute: () => rootRoute,
} as any)

const PrdSlugIndexRoute = PrdSlugIndexImport.update({
  id: '/prd/$slug/',
  path: '/prd/$slug/',
  getParentRoute: () => rootRoute,
} as any)

const BrowseCategoryIndexRoute = BrowseCategoryIndexImport.update({
  id: '/browse/$category/',
  path: '/browse/$category/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$collection/': {
      id: '/$collection/'
      path: '/$collection'
      fullPath: '/$collection'
      preLoaderRoute: typeof CollectionIndexImport
      parentRoute: typeof rootRoute
    }
    '/cart/': {
      id: '/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartIndexImport
      parentRoute: typeof rootRoute
    }
    '/order/': {
      id: '/order/'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof OrderIndexImport
      parentRoute: typeof rootRoute
    }
    '/shipping/': {
      id: '/shipping/'
      path: '/shipping'
      fullPath: '/shipping'
      preLoaderRoute: typeof ShippingIndexImport
      parentRoute: typeof rootRoute
    }
    '/browse/$category/': {
      id: '/browse/$category/'
      path: '/browse/$category'
      fullPath: '/browse/$category'
      preLoaderRoute: typeof BrowseCategoryIndexImport
      parentRoute: typeof rootRoute
    }
    '/prd/$slug/': {
      id: '/prd/$slug/'
      path: '/prd/$slug'
      fullPath: '/prd/$slug'
      preLoaderRoute: typeof PrdSlugIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$collection': typeof CollectionIndexRoute
  '/cart': typeof CartIndexRoute
  '/order': typeof OrderIndexRoute
  '/shipping': typeof ShippingIndexRoute
  '/browse/$category': typeof BrowseCategoryIndexRoute
  '/prd/$slug': typeof PrdSlugIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$collection': typeof CollectionIndexRoute
  '/cart': typeof CartIndexRoute
  '/order': typeof OrderIndexRoute
  '/shipping': typeof ShippingIndexRoute
  '/browse/$category': typeof BrowseCategoryIndexRoute
  '/prd/$slug': typeof PrdSlugIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$collection/': typeof CollectionIndexRoute
  '/cart/': typeof CartIndexRoute
  '/order/': typeof OrderIndexRoute
  '/shipping/': typeof ShippingIndexRoute
  '/browse/$category/': typeof BrowseCategoryIndexRoute
  '/prd/$slug/': typeof PrdSlugIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$collection'
    | '/cart'
    | '/order'
    | '/shipping'
    | '/browse/$category'
    | '/prd/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$collection'
    | '/cart'
    | '/order'
    | '/shipping'
    | '/browse/$category'
    | '/prd/$slug'
  id:
    | '__root__'
    | '/'
    | '/$collection/'
    | '/cart/'
    | '/order/'
    | '/shipping/'
    | '/browse/$category/'
    | '/prd/$slug/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CollectionIndexRoute: typeof CollectionIndexRoute
  CartIndexRoute: typeof CartIndexRoute
  OrderIndexRoute: typeof OrderIndexRoute
  ShippingIndexRoute: typeof ShippingIndexRoute
  BrowseCategoryIndexRoute: typeof BrowseCategoryIndexRoute
  PrdSlugIndexRoute: typeof PrdSlugIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CollectionIndexRoute: CollectionIndexRoute,
  CartIndexRoute: CartIndexRoute,
  OrderIndexRoute: OrderIndexRoute,
  ShippingIndexRoute: ShippingIndexRoute,
  BrowseCategoryIndexRoute: BrowseCategoryIndexRoute,
  PrdSlugIndexRoute: PrdSlugIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$collection/",
        "/cart/",
        "/order/",
        "/shipping/",
        "/browse/$category/",
        "/prd/$slug/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$collection/": {
      "filePath": "$collection/index.tsx"
    },
    "/cart/": {
      "filePath": "cart/index.tsx"
    },
    "/order/": {
      "filePath": "order/index.tsx"
    },
    "/shipping/": {
      "filePath": "shipping/index.tsx"
    },
    "/browse/$category/": {
      "filePath": "browse/$category/index.tsx"
    },
    "/prd/$slug/": {
      "filePath": "prd/$slug/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
